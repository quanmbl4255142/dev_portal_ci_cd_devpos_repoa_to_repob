"""
Auto Sync Service
T·ª± ƒë·ªông l·∫•y d·ªØ li·ªáu t·ª´ ArgoCD khi c√≥ c·∫≠p nh·∫≠t ho·∫∑c d·ªØ li·ªáu m·ªõi
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import aiohttp
import json
from argo_data_fetcher import ArgoCDDataFetcher
import os
from mongodb_client import get_mongodb_client

logger = logging.getLogger(__name__)

class AutoSyncService:
    """Service t·ª± ƒë·ªông sync d·ªØ li·ªáu t·ª´ ArgoCD"""
    
    def __init__(self, argocd_server_url: str, argocd_token: str = None, poll_interval: int = 30):
        self.argocd_server_url = argocd_server_url
        self.argocd_token = argocd_token
        self.poll_interval = poll_interval  # seconds
        self.is_running = False
        self.last_sync_time = None
        self.session: Optional[aiohttp.ClientSession] = None
        
    async def start_session(self):
        """Start aiohttp session"""
        if not self.session:
            headers = {
                'Content-Type': 'application/json'
            }
            if self.argocd_token:
                headers['Authorization'] = f'Bearer {self.argocd_token}'
            
            self.session = aiohttp.ClientSession(
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=30)
            )
    
    async def close_session(self):
        """Close aiohttp session"""
        if self.session:
            await self.session.close()
            self.session = None
    
    async def check_argocd_changes(self) -> bool:
        """Ki·ªÉm tra xem c√≥ thay ƒë·ªïi n√†o trong ArgoCD kh√¥ng"""
        try:
            if not self.session:
                await self.start_session()
            
            # L·∫•y danh s√°ch applications t·ª´ ArgoCD
            url = f"{self.argocd_server_url}/api/v1/applications"
            
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    applications = data.get('items', [])
                    
                    # Ki·ªÉm tra xem c√≥ application n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t g·∫ßn ƒë√¢y kh√¥ng
                    current_time = datetime.utcnow()
                    recent_changes = False
                    
                    for app in applications:
                        # Ki·ªÉm tra lastSyncTime
                        last_sync = app.get('status', {}).get('sync', {}).get('syncedAt')
                        if last_sync:
                            try:
                                sync_time = datetime.fromisoformat(last_sync.replace('Z', '+00:00'))
                                if self.last_sync_time is None or sync_time > self.last_sync_time:
                                    recent_changes = True
                                    break
                            except:
                                pass
                        
                        # Ki·ªÉm tra creationTimestamp
                        created = app.get('metadata', {}).get('creationTimestamp')
                        if created:
                            try:
                                created_time = datetime.fromisoformat(created.replace('Z', '+00:00'))
                                if self.last_sync_time is None or created_time > self.last_sync_time:
                                    recent_changes = True
                                    break
                            except:
                                pass
                    
                    return recent_changes
                else:
                    logger.error(f"ArgoCD API error: {response.status}")
                    return False
                    
        except Exception as e:
            logger.error(f"Error checking ArgoCD changes: {e}")
            return False
    
    async def sync_if_changed(self) -> bool:
        """Sync d·ªØ li·ªáu t·ª´ ArgoCD v√†o MongoDB"""
        try:
            logger.info("üîÑ B·∫Øt ƒë·∫ßu sync d·ªØ li·ªáu t·ª´ ArgoCD...")
            
            # Lu√¥n sync d·ªØ li·ªáu t·ª´ ArgoCD (kh√¥ng c·∫ßn ki·ªÉm tra thay ƒë·ªïi)
            fetcher = ArgoCDDataFetcher(self.argocd_server_url, self.argocd_token)
            await fetcher.start_session()
            
            try:
                success = await fetcher.sync_applications_to_mongodb()
                if success:
                    self.last_sync_time = datetime.utcnow()
                    logger.info("‚úÖ Sync th√†nh c√¥ng!")
                    return True
                else:
                    logger.error("‚ùå Sync th·∫•t b·∫°i!")
                    return False
            finally:
                await fetcher.close_session()
                
        except Exception as e:
            logger.error(f"Error in sync_if_changed: {e}")
            return False
    
    async def start_auto_sync(self):
        """B·∫Øt ƒë·∫ßu auto sync"""
        self.is_running = True
        logger.info(f"üöÄ B·∫Øt ƒë·∫ßu auto sync v·ªõi interval {self.poll_interval}s")
        
        while self.is_running:
            try:
                await self.sync_if_changed()
                await asyncio.sleep(self.poll_interval)
            except Exception as e:
                logger.error(f"Error in auto sync loop: {e}")
                await asyncio.sleep(10)  # Wait before retrying
    
    async def stop_auto_sync(self):
        """D·ª´ng auto sync"""
        self.is_running = False
        logger.info("üõë D·ª´ng auto sync")
        await self.close_session()
    
    async def force_sync(self) -> bool:
        """Force sync ngay l·∫≠p t·ª©c"""
        logger.info("üîÑ Force sync ƒë∆∞·ª£c g·ªçi...")
        
        fetcher = ArgoCDDataFetcher(self.argocd_server_url, self.argocd_token)
        await fetcher.start_session()
        
        try:
            success = await fetcher.sync_applications_to_mongodb()
            if success:
                self.last_sync_time = datetime.utcnow()
                logger.info("‚úÖ Force sync th√†nh c√¥ng!")
            return success
        finally:
            await fetcher.close_session()

# Global auto sync service instance
auto_sync_service = None

async def get_auto_sync_service() -> AutoSyncService:
    """Get or create auto sync service instance"""
    global auto_sync_service
    
    if auto_sync_service is None:
        # ƒê·ªçc c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng thay cho hardcode
        # ARGOCD_SERVER v√≠ d·ª•: https://argocd.example.com ho·∫∑c https://localhost:8082 (port-forward)
        # ARGOCD_TOKEN: token ƒëƒÉng nh·∫≠p ArgoCD (Bearer) ho·∫∑c ƒë·ªÉ tr·ªëng n·∫øu public
        argocd_url = os.getenv("ARGOCD_SERVER", "")
        argocd_token = os.getenv("ARGOCD_TOKEN", "")
        poll_interval = int(os.getenv("AUTO_SYNC_INTERVAL", "30") or 30)
        
        if not argocd_url:
            logger.warning("‚ö†Ô∏è Auto sync disabled - missing ARGOCD_SERVER. Set env ARGOCD_SERVER to enable.")
            auto_sync_service = None
        else:
            auto_sync_service = AutoSyncService(argocd_url, argocd_token, poll_interval=poll_interval)
            try:
                await auto_sync_service.start_session()
                logger.info(f"Auto sync configured for {argocd_url} with interval {poll_interval}s")
            except Exception as e:
                logger.error(f"Failed to start auto sync session: {e}")
                auto_sync_service = None
    
    return auto_sync_service

async def start_auto_sync():
    """Start auto sync service"""
    service = await get_auto_sync_service()
    if service:
        await service.start_auto_sync()
    else:
        logger.info("‚ö†Ô∏è Auto sync disabled - no ArgoCD URL configured")

async def stop_auto_sync():
    """Stop auto sync service"""
    global auto_sync_service
    if auto_sync_service:
        await auto_sync_service.stop_auto_sync()
        auto_sync_service = None

async def force_sync_now():
    """Force sync ngay l·∫≠p t·ª©c"""
    service = await get_auto_sync_service()
    if service:
        return await service.force_sync()
    else:
        logger.warning("‚ö†Ô∏è Force sync disabled - no ArgoCD URL configured")
        return False
